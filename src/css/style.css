/* Write your CSS rules here */
/* style.cs: BYU IT&C 210a Boilerplate Stylesheet */

/* We use the Material Icons font in some of the styles. This brings in
the corresponding fonts from Google Fonts. */
@import url("https://fonts.googleapis.com/icon?family=Material+Icons");

/* The root rule is the foundation for the whole page. These settings _cascade_
to all elements unless they are overridden. */
:root {
  /* Change these variables according to your theme */
  --primary: #adddff;
  --accent: #c66a85;
  --checked: #2b942f;
  --delete: #d11a2a;
  --primary-text: #1e1420;
  --background: #fffafa;
  /* Window background and default font */
  background-color: var(--primary);
  font-family: Verdana, Geneva, Tahoma, sans-serif;
  line-height: 1.75;
}

h1 {
  color: var(--primary-text);
  font-family: sans-serif;
}

form {
  background-color: var(--background);
  padding: 20px;
  border-top-style: groove;
  border-top-width: 20px;
  border-bottom-left-radius: 5px;
  border-bottom-right-radius: 5px;
}

/* These rules with element selectors apply to all elements of the corresponding names. In a sense, they
are automatically applied */

body {
  width: 90%;
  margin: 1em auto;
}

h1 {
  font-family: Tahoma, sans-serif;
  font-weight: bolder;
}

.navbar {
  border-bottom-style: ridge;
  border-bottom-width: 20px;
}

nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-top-left-radius: 5px;
  border-top-right-radius: 5px;
  background-color: var(--background);
  padding: 0.75rem;
}

nav a {
  /*display: flex;*/
  justify-content: flex-end;
  align-items: center;
  width: auto;
  color: var(
    --primary-text
  ); /* Links in the nav bar are light blue instead of white */
  text-decoration: none; /* Don't underline links in the nav bar */
}

nav a:hover {
  color: var(--accent);
}

/* These with class selectors take effect when you apply the corresponding class name on an element */

.tasklist {
  padding-left: 0; /* Remove padding that <ul> has by default */
  list-style-type: none; /* No bullets in the list */
}

.task {
  display: block;
  width: 100%;
  box-sizing: border-box;
}

.task-checked {
  text-decoration: line-through;
}

.task-done {
  display: inline-block;
  box-sizing: border-box;
  /* Add property to change checkbox icon color */
}

.task-description {
  display: inline-block;
  width: calc(100% - 12em);
  box-sizing: border-box;
}

.task-date {
  display: inline-block;
  width: 6em;
}

.task-delete {
  display: inline-block;
  box-sizing: border-box;
  color: var(--delete);
  /* Add property to change delete icon color */
}

.material-icon {
  border: none; /* No border */
  background: none; /* Match the background of the parent */
  font-family: "Material Icons"; /* Use the icon font */
  font-size: inherit; /* Input doesn't automatically inherit font size. This brings it in. */
  cursor: pointer; /* Change the cursor to a pointer when hovering on this element */
}

/* Add your custom class rules here */

.example {
  color: var(--primary-text);
}

/* Add rule for: */
/* "Create Task" button border, background, and text */

/* ===== checkbox-icon =============== */
/* These three rules apply the checkbox icon from the Material Icons font to a checkbox */

input.checkbox-icon {
  font-family: "Material Icons";
  font-size: inherit; /* Input doesn't automatically inherit font size. This brings it in. */
  appearance: none; /* Hide the existing checkbox so that the new rendering will overlay it */
  cursor: pointer; /* Change the cursor to a pointer when hovering on this element */
  color: var(--checked);
}

input.checkbox-icon:before {
  content: "check_box_outline_blank";
}

input.checkbox-icon:checked:before {
  content: "check_box";
}

/* ===== toggle-switch =============== */
/* This is pretty advanced CSS and is intended to be ready-to-use. Just
 * set an input of type checkbox to class 'toggle-switch' to make the
 * control look like a switch instead of a checkbox.
 * Example:
 *     <input type='checkbox' name='cb1' class='toggle-switch'/><label for='cb1'>Lights</label>
 *
 * Adapted from: https://codeconvey.com/convert-checkbox-to-toggle-button-css/
 * with important adjustments to make it senstive to the local font size.
 * and the addition of comments.
 */

/* Toggle Switch */
input.toggle-switch {
  vertical-align: middle;
  font-size: 1em; /* Input doesn't automatically inherit font size. This brings it in. */
  appearance: none; /* Hide the existing checkbox so that the new rendering will overlay it */
  position: relative; /* Relative positioning holds this elements space and lets :before and :after pseudo-elements position relative to this */
  cursor: pointer; /* Change the cursor to a pointer when hovering on this element */
  margin: 0em 0.2em; /* No top and bottom margin. Make space to the left and right. Use 'em' units to keep space relative to local font size */
  width: 1.4em; /* Set the element width and height relative to the font size. */
  height: 0.8em;
}

/* Use the :after pseudo-element to create an oval as the surface of the button. */
input.toggle-switch:after {
  vertical-align: middle; /* Center this vertically */
  content: ""; /* Empty text content. But still required to establish the element */
  display: inline-block; /* Inline-block makes it take up rectangular space */
  position: absolute; /* Absolute positioning without left and top locates this exactly on top of the input.toggle-switch */
  width: 1.4em; /* Width and height of the oval */
  height: 0.6em;
  background-color: rgb(128, 128, 128); /* Light gray fill */
  border-radius: 0.3em; /* Border radius of half the height makes this an oval instead of a rectangle */
}

/* Use the :before pseudo-element to create a circle as the toggle handle */
input.toggle-switch:before {
  vertical-align: middle; /* Center this vertically thereby aligning to the background oval */
  content: ""; /* Empty text content required to take up any space */
  display: inline-block; /* Inline-block makes it take up rectangular space */
  position: absolute; /* Absolute positioning without x and y locates this on top of the input.toggle-switch */
  width: 0.7em; /* Width and height are the same making it take up a square space which will be round with the border-radius */
  height: 0.7em;
  z-index: 1; /* Z-index of 1 positions this on top of the input.toggle-switch:after */
  left: 0; /* Position at the left edge of the parent checkbox (it will shift right when activated) */
  top: -0.1em; /* Center it vertically on the background oval - tweaked to position just right */
  border: 1px solid rgb(128, 128, 128); /* border is the same color as the background oval */
  border-radius: 0.6em; /* Radious greater than 1/2 the height/width makes a circle */
  background-color: white; /* Fill with white */
  box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.6); /* Cast a shadow on the background */
  transition-duration: 0.3s; /* Animate turning on or off over 0.3 seconds */
}

/* Shift the handle to the right when turned on */
input.toggle-switch:checked:before {
  left: 0.7em; /* When turned on, shift to the right */
  box-shadow: -1px 1px 3px rgba(0, 0, 0, 0.6); /* When turned on, cast the shadow the other direction */
}

/* Change the background color to green when turned on */
input.toggle-switch:checked:after {
  background-color: #16a085;
}

.material-symbols-outlined {
  font-variation-settings: "FILL" 0, "wght" 400, "GRAD" 0, "opsz" 48;
}

.my-input {
  width: 100%;
  box-sizing: border-box;
  margin: 0px 0px 10px 0px;
}

.button-styled {
  background-color: var(--accent); /* green background color */
  color: var(--primary-text); /* white text color */
  margin: 10px 0px 0px 0px;
  border: 10px; /* no border */
  padding: 10px 20px; /* padding on top/bottom and left/right */
  text-align: center; /* center align text */
  text-decoration: none; /* no underline */
  display: inline-block; /* display as inline-block */
  font-size: 16px; /* font size */
  font-weight: bold; /* bold text */
  border-radius: 5px; /* rounded corners */
  cursor: pointer; /* change cursor on hover */
  transition: background-color 0.3s ease; /* smooth color transition */
}

.button-styled:hover {
  background-color: var(--checked); /* darker green on hover */
}

.divider {
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
}

.line {
  flex-grow: 1;
  height: 1px;
  background-color: #000;
}

.divider-explain {
  font-size: x-small;
  margin-left: 3px;
  margin-right:3px;
}

.input-container {
  display: flex; /* Use Flexbox for layout */
  flex-direction: column; /* Display input fields in a column */
  margin-bottom: 10px;
}

.input-row {
  display: flex;
  align-items: center;
}


.input-row input {
  flex: 1; /* Allow input to expand and fill remaining space */
  border: 1px solid #ccc; /* Adding a border for demonstration */
  padding: 5px; /* Adding padding for a cleaner look */
}

